Conditional Statements: notes, sample programs and algorithms




If (pass)
   Graduate
Else
	fail

False - 0

True - 1

- all the relational operator either gives true or false answers


Finding Maximum of Two number (if x > y) 

Input - Process - Output


Flow chart

START - print(enter two numbers) -> condition ( x > y) if true x is greater else y is greater.  

Algorithm MAX 

Begin 
	print "Enter two no "
	Read x, y
	if x > y then 
		print "Max is" X;
	else 
		print "Max is" Y;
	end
END


C++ Program

#include <iostream>
Using namespace std;

Int main()
{
	int x, y;
	cout << "Enter 2 no"
	cin >> x >>y;
	if (x > y) 
	{
		cout >> "Max is " x;
	}
	else
	{
		cout << "Max is " << y;
	}
	
	return 0
}

// you use cout <<"Hello<< ends;


// a program to check whether a roll number is valid or not, with a simple conditional statement

#include <iostream>

Using namespace std;

Int main()
{

	cout << " Enter your roll number";
	cin >> roll;
	
	if(roll < 1)
	{
		cout << "Invalid roll";
	}
	else
	{
		cout << "Valid";
	}

	
	return 0;
}


// a program that checks division by zero error

#include <iostream>

Using namespace std;

Int main()
{
	cout " enter 2 numbers";
	cin >> a >> b;

	if (b==0)
		cout << "Division by Zero";
	c = a/b;


 	return 0;
}

Logical Operators - Compound Statements you use truth tables to prove for AND, OR. and NOT


// Nested If

if(condition)
{
    if(conditon)
    {
    
    }
    else
    {
    
    }


}

// example of finding max of 3 numnbers a,b,c using nested IF


Flowchart

START -> print "Enter 3 no" read(a,b,c) -> condition(a>b and a > c), if true, print a -> condition(b>c), if true, print b else print c -> STOP

ALGORITHM

if (a>c && a >c)
{
    a is greater;
}
elseif(b>c)
    {
      b is greater;
    }
    else
    {
        c is greater;
    }



C++ prgram


#include <iostream>
using namespace std;

int main()
{
    int a,b,c;
    cout << "Enter 3 numbers" << endl;
    cin >> a >> b >> c;
    
    if(a>b && a>c)
    {
        cout << b;
    }
    else if (b>c)
    {
        cout << b;
    }
    else
    {
        cout << c;
    }
}

// Find Nature of Quadratic Roots

Quadratic Equation

ax^2 + bx + c = 0

roots = (-b +- sqrt(b^2 - 4ac))/2a

Discriminant

d = b^2 - 4ac

if d = 0, real and equal
if d > 0, real and unequal
if d < 0, imaginary


// Another example
Display Grades

total = m1 + m2 + m3;
Avg = total /3;

criteria

Grade:

A = avg >= 60
B = 35 < Avg < 60

int main()
{
    int m1,m2,m3, Total;
    
    float avg;
    
    cout << "Enter the 3 subject marks ";
    cin >> m1 >> m2 >> m3;
    
    Total = m1 + m2 + m3;
    
    Avg = Total/3;
    
    if(avg >= 60)
    {
        cout << "A" << endl;
    }
    else if(avg >=35 and avg <=60)
    {
        cout << "B" << endl;
        
    }
    else
    {
        cout << "C" << endl;
    }
}

//else if Ladder
    //example to display the name of the day based on the day number
    
    
    int main()
    {
    int day;
    cout << "Enter day number";
    cin >> day;
    
    if(day == 1)
    {
        cout << "Mon"<<endl;
    }
    else if(day == 2)
    {
        cout << "Tues" << endl; // and so on
    }
    
    
}

**** Short Circuit *****

for &&, you have to check if both cases to be true
for ||, if the first case is

**** Dynamic Declaration ****


HEAP
STACK

MAIN
    CODE
    
    
- once the block ends, all the memory inside the block is gone.
- in c++ 17 you create new variable inside conditional statements.

*** Switch Cases - Branch and Control****

switch (expression)
{
    case 1:
    
            break;
            
    case 2:
            break;
            
        default;
}

- switch cases are used for menu programs

//example

#include <iostream>

using namespace std;

int main()
{
    cout <<"Menu\n";
    cout << "1. Add\n" << "2. Sub\n" << "3. Mul\n" << "4. Div\n" ;
    
    int option;
    cout << "enter your choice";
    cin >> option;
    int a,b,c;
    cout << "enter 2 numbers";"
    cin >> a >>b;
    
    switch (option)
    {
        case 1: c = a+ b;
                cout << c;
                break;
                
                and so on
}
    
    return 0;
    
}
